// Package apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package apigen

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for MetaStoreType.
const (
	Etcd       MetaStoreType = "etcd"
	Postgresql MetaStoreType = "postgresql"
)

// Defines values for PrivateLinkConnectionState.
const (
	ACCEPTED          PrivateLinkConnectionState = "ACCEPTED"
	CLOSED            PrivateLinkConnectionState = "CLOSED"
	PENDING           PrivateLinkConnectionState = "PENDING"
	REJECTED          PrivateLinkConnectionState = "REJECTED"
	STATUSUNSPECIFIED PrivateLinkConnectionState = "STATUS_UNSPECIFIED"
)

// Defines values for PrivateLinkStatus.
const (
	CREATED  PrivateLinkStatus = "CREATED"
	CREATING PrivateLinkStatus = "CREATING"
	DELETING PrivateLinkStatus = "DELETING"
	ERROR    PrivateLinkStatus = "ERROR"
	UNKNOWN  PrivateLinkStatus = "UNKNOWN"
)

// Defines values for TenantHealthStatus.
const (
	Healthy   TenantHealthStatus = "Healthy"
	Unhealthy TenantHealthStatus = "Unhealthy"
	Unknown   TenantHealthStatus = "Unknown"
)

// Defines values for TenantStatus.
const (
	ConfigUpdating TenantStatus = "ConfigUpdating"
	Creating       TenantStatus = "Creating"
	Deleting       TenantStatus = "Deleting"
	Expired        TenantStatus = "Expired"
	Failed         TenantStatus = "Failed"
	Running        TenantStatus = "Running"
	Starting       TenantStatus = "Starting"
	Stopped        TenantStatus = "Stopped"
	Stopping       TenantStatus = "Stopping"
	Upgrading      TenantStatus = "Upgrading"
)

// Defines values for TierId.
const (
	BYOC           TierId = "BYOC"
	Benchmark      TierId = "Benchmark"
	Developer      TierId = "Developer"
	DeveloperBasic TierId = "Developer-Basic"
	DeveloperFree  TierId = "Developer-Free"
	DeveloperPlus  TierId = "Developer-Plus"
	DeveloperTest  TierId = "Developer-Test"
	Free           TierId = "Free"
	Invited        TierId = "Invited"
	Standard       TierId = "Standard"
	Test           TierId = "Test"
)

// Defines values for QueryErrLogParamsTarget.
const (
	Sink   QueryErrLogParamsTarget = "sink"
	Source QueryErrLogParamsTarget = "source"
)

// Defines values for QueryErrLogParamsDirection.
const (
	Backward QueryErrLogParamsDirection = "backward"
	Forward  QueryErrLogParamsDirection = "forward"
)

// AvailableComponentType defines model for AvailableComponentType.
type AvailableComponentType struct {
	Cpu     string `json:"cpu"`
	Id      string `json:"id"`
	Maximum int    `json:"maximum"`
	Memory  string `json:"memory"`
}

// AvailableMetaStore defines model for AvailableMetaStore.
type AvailableMetaStore struct {
	Etcd       *AvailableMetaStoreEtcd       `json:"etcd,omitempty"`
	Postgresql *AvailableMetaStorePostgreSql `json:"postgresql,omitempty"`
}

// AvailableMetaStoreEtcd defines model for AvailableMetaStoreEtcd.
type AvailableMetaStoreEtcd struct {
	MaximumSizeGiB int                      `json:"maximumSizeGiB"`
	Nodes          []AvailableComponentType `json:"nodes"`
}

// AvailableMetaStorePostgreSql defines model for AvailableMetaStorePostgreSql.
type AvailableMetaStorePostgreSql struct {
	MaximumSizeGiB int                      `json:"maximumSizeGiB"`
	Nodes          []AvailableComponentType `json:"nodes"`
}

// ComponentResource defines model for ComponentResource.
type ComponentResource struct {
	ComponentTypeId string `json:"componentTypeId"`
	Cpu             string `json:"cpu"`
	Memory          string `json:"memory"`
	Replica         int    `json:"replica"`
}

// ComponentResourceRequest defines model for ComponentResourceRequest.
type ComponentResourceRequest struct {
	ComponentTypeId string `json:"componentTypeId"`
	Replica         int    `json:"replica"`
}

// CreateDBUserRequestBody defines model for CreateDBUserRequestBody.
type CreateDBUserRequestBody struct {
	Createdb  bool   `json:"createdb"`
	Password  string `json:"password"`
	Superuser bool   `json:"superuser"`
	TenantId  uint64 `json:"tenantId"`
	Username  string `json:"username"`
}

// CreateTenantResponseBody defines model for CreateTenantResponseBody.
type CreateTenantResponseBody struct {
	TenantId   uint64 `json:"tenantId"`
	TenantName string `json:"tenantName"`
}

// DBUser defines model for DBUser.
type DBUser struct {
	Usecreatedb bool   `json:"usecreatedb"`
	Username    string `json:"username"`
	Usesuper    bool   `json:"usesuper"`
	Usesysid    uint64 `json:"usesysid"`
}

// DBUserArray defines model for DBUserArray.
type DBUserArray = []DBUser

// DBUsers defines model for DBUsers.
type DBUsers struct {
	Dbusers *DBUserArray `json:"dbusers,omitempty"`
}

// Endpoint defines model for Endpoint.
type Endpoint struct {
	Database     string `json:"database"`
	Host         string `json:"host"`
	Id           int64  `json:"id"`
	InternalHost string `json:"internalHost"`
	InternalPort int    `json:"internalPort"`
	Options      string `json:"options"`
	Port         int    `json:"port"`
	TenantId     int64  `json:"tenantId"`
}

// ErrLogQueryResult defines model for ErrLogQueryResult.
type ErrLogQueryResult struct {
	Status string     `json:"status"`
	Values [][]string `json:"values"`
}

// GetImageTagResponse defines model for GetImageTagResponse.
type GetImageTagResponse struct {
	ImageTag string `json:"imageTag"`
}

// MetaStoreEtcd defines model for MetaStoreEtcd.
type MetaStoreEtcd struct {
	Resource ComponentResource `json:"resource"`
	SizeGb   int               `json:"sizeGb"`
}

// MetaStorePostgreSql defines model for MetaStorePostgreSql.
type MetaStorePostgreSql struct {
	Resource ComponentResource `json:"resource"`
	SizeGb   int               `json:"sizeGb"`
}

// MetaStoreType defines model for MetaStoreType.
type MetaStoreType string

// Page defines model for Page.
type Page struct {
	Limit  uint64 `json:"limit"`
	Offset uint64 `json:"offset"`
}

// PostPrivateLinkRequestBody defines model for PostPrivateLinkRequestBody.
type PostPrivateLinkRequestBody struct {
	ConnectionName string `json:"connectionName"`
	Target         string `json:"target"`
}

// PostPrivateLinkResponseBody defines model for PostPrivateLinkResponseBody.
type PostPrivateLinkResponseBody struct {
	ConnectionName string             `json:"connectionName"`
	Id             openapi_types.UUID `json:"id"`
}

// PostTenantResourcesRequestBody defines model for PostTenantResourcesRequestBody.
type PostTenantResourcesRequestBody struct {
	Compactor  *ComponentResourceRequest `json:"compactor,omitempty"`
	Compute    *ComponentResourceRequest `json:"compute,omitempty"`
	Frontend   *ComponentResourceRequest `json:"frontend,omitempty"`
	Meta       *ComponentResourceRequest `json:"meta,omitempty"`
	Standalone *ComponentResourceRequest `json:"standalone,omitempty"`
}

// PrivateLink defines model for PrivateLink.
type PrivateLink struct {
	ConnectionName  string                     `json:"connectionName"`
	ConnectionState PrivateLinkConnectionState `json:"connectionState"`
	Endpoint        *string                    `json:"endpoint,omitempty"`
	Id              openapi_types.UUID         `json:"id"`
	Status          PrivateLinkStatus          `json:"status"`
	Target          *string                    `json:"target,omitempty"`
	TenantId        int64                      `json:"tenantId"`
}

// PrivateLinkConnectionState defines model for PrivateLink.ConnectionState.
type PrivateLinkConnectionState string

// PrivateLinkStatus defines model for PrivateLink.Status.
type PrivateLinkStatus string

// Size defines model for Size.
type Size struct {
	Size uint64 `json:"size"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	ClusterName    *string            `json:"clusterName,omitempty"`
	CreatedAt      time.Time          `json:"createdAt"`
	EtcdConfig     string             `json:"etcd_config"`
	HealthStatus   TenantHealthStatus `json:"health_status"`
	Id             uint64             `json:"id"`
	ImageTag       string             `json:"imageTag"`
	LatestImageTag string             `json:"latestImageTag"`
	NsId           openapi_types.UUID `json:"nsId"`
	OrgId          openapi_types.UUID `json:"orgId"`
	Region         string             `json:"region"`
	Resources      TenantResource     `json:"resources"`
	RwConfig       string             `json:"rw_config"`
	Status         TenantStatus       `json:"status"`
	TenantName     string             `json:"tenantName"`
	Tier           TierId             `json:"tier"`
	UpdatedAt      time.Time          `json:"updatedAt"`
	UserId         uint64             `json:"userId"`
}

// TenantHealthStatus defines model for Tenant.HealthStatus.
type TenantHealthStatus string

// TenantStatus defines model for Tenant.Status.
type TenantStatus string

// TenantArray defines model for TenantArray.
type TenantArray = []Tenant

// TenantRequestRequestBody defines model for TenantRequestRequestBody.
type TenantRequestRequestBody struct {
	ClusterName *string                `json:"clusterName,omitempty"`
	ConfigId    *openapi_types.UUID    `json:"configId,omitempty"`
	EtcdConfig  *string                `json:"etcdConfig,omitempty"`
	ImageTag    *string                `json:"imageTag,omitempty"`
	Resources   *TenantResourceRequest `json:"resources,omitempty"`

	// RwConfig if config ID is not provided, use this config. currently used in tf plugin
	RwConfig   *string `json:"rwConfig,omitempty"`
	Sku        *string `json:"sku,omitempty"`
	TenantName string  `json:"tenantName"`
	Tier       *TierId `json:"tier,omitempty"`
}

// TenantResource defines model for TenantResource.
type TenantResource struct {
	Components        TenantResourceComponents   `json:"components"`
	ComputeCache      TenantResourceComputeCache `json:"computeCache"`
	EtcdVolumeSizeGiB *int                       `json:"etcdVolumeSizeGiB,omitempty"`
	MetaStore         *TenantResourceMetaStore   `json:"metaStore,omitempty"`
}

// TenantResourceComponents defines model for TenantResourceComponents.
type TenantResourceComponents struct {
	Compactor  *ComponentResource `json:"compactor,omitempty"`
	Compute    *ComponentResource `json:"compute,omitempty"`
	Etcd       *ComponentResource `json:"etcd,omitempty"`
	Frontend   *ComponentResource `json:"frontend,omitempty"`
	Meta       *ComponentResource `json:"meta,omitempty"`
	Standalone *ComponentResource `json:"standalone,omitempty"`
}

// TenantResourceComputeCache defines model for TenantResourceComputeCache.
type TenantResourceComputeCache struct {
	SizeGb int `json:"sizeGb"`
}

// TenantResourceMetaStore defines model for TenantResourceMetaStore.
type TenantResourceMetaStore struct {
	Etcd       *MetaStoreEtcd       `json:"etcd,omitempty"`
	Postgresql *MetaStorePostgreSql `json:"postgresql,omitempty"`
	Type       MetaStoreType        `json:"type"`
}

// TenantResourceRequest defines model for TenantResourceRequest.
type TenantResourceRequest struct {
	Components              TenantResourceRequestComponents `json:"components"`
	ComputeFileCacheSizeGiB int                             `json:"computeFileCacheSizeGiB"`
	EtcdVolumeSizeGiB       *int                            `json:"etcdVolumeSizeGiB,omitempty"`
	MetaStore               *TenantResourceRequestMetaStore `json:"metaStore,omitempty"`
}

// TenantResourceRequestComponents defines model for TenantResourceRequestComponents.
type TenantResourceRequestComponents struct {
	Compactor  *ComponentResourceRequest `json:"compactor,omitempty"`
	Compute    *ComponentResourceRequest `json:"compute,omitempty"`
	Etcd       *ComponentResourceRequest `json:"etcd,omitempty"`
	Frontend   *ComponentResourceRequest `json:"frontend,omitempty"`
	Meta       *ComponentResourceRequest `json:"meta,omitempty"`
	Standalone *ComponentResourceRequest `json:"standalone,omitempty"`
}

// TenantResourceRequestMetaStore defines model for TenantResourceRequestMetaStore.
type TenantResourceRequestMetaStore struct {
	Etcd       *TenantResourceRequestMetaStoreEtcd       `json:"etcd,omitempty"`
	Postgresql *TenantResourceRequestMetaStorePostgreSql `json:"postgresql,omitempty"`
	Type       MetaStoreType                             `json:"type"`
}

// TenantResourceRequestMetaStoreEtcd defines model for TenantResourceRequestMetaStoreEtcd.
type TenantResourceRequestMetaStoreEtcd struct {
	ComponentTypeId string `json:"componentTypeId"`
	Replica         int    `json:"replica"`
	SizeGb          int    `json:"sizeGb"`
}

// TenantResourceRequestMetaStorePostgreSql defines model for TenantResourceRequestMetaStorePostgreSql.
type TenantResourceRequestMetaStorePostgreSql struct {
	ComponentTypeId string `json:"componentTypeId"`
	Replica         int    `json:"replica"`
	SizeGb          int    `json:"sizeGb"`
}

// TenantSizePage defines model for TenantSizePage.
type TenantSizePage struct {
	Limit   uint64      `json:"limit"`
	Offset  uint64      `json:"offset"`
	Size    uint64      `json:"size"`
	Tenants TenantArray `json:"tenants"`
}

// Tier defines model for Tier.
type Tier struct {
	AvailableCompactorNodes            []AvailableComponentType `json:"availableCompactorNodes"`
	AvailableComputeNodes              []AvailableComponentType `json:"availableComputeNodes"`
	AvailableEtcdNodes                 []AvailableComponentType `json:"availableEtcdNodes"`
	AvailableFrontendNodes             []AvailableComponentType `json:"availableFrontendNodes"`
	AvailableMetaNodes                 []AvailableComponentType `json:"availableMetaNodes"`
	AvailableMetaStore                 *AvailableMetaStore      `json:"availableMetaStore,omitempty"`
	AvailableStandaloneNodes           []AvailableComponentType `json:"availableStandaloneNodes"`
	Id                                 *TierId                  `json:"id,omitempty"`
	MaximumComputeNodeFileCacheSizeGiB int                      `json:"maximumComputeNodeFileCacheSizeGiB"`
	MaximumEtcdSizeGiB                 int                      `json:"maximumEtcdSizeGiB"`
	RetentionPeriod                    int                      `json:"retentionPeriod"`
	ValidityPeriod                     int                      `json:"validityPeriod"`
}

// TierArray defines model for TierArray.
type TierArray = []Tier

// TierId defines model for TierId.
type TierId string

// Tiers defines model for Tiers.
type Tiers struct {
	Tiers TierArray `json:"tiers"`
}

// UpdateDBUserRequestBody defines model for UpdateDBUserRequestBody.
type UpdateDBUserRequestBody struct {
	Password string `json:"password"`
	TenantId uint64 `json:"tenantId"`
	Username string `json:"username"`
}

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse struct {
	Msg string `json:"msg"`
}

// DefaultResponse defines model for DefaultResponse.
type DefaultResponse struct {
	Msg string `json:"msg"`
}

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse struct {
	Msg string `json:"msg"`
}

// ServiceUnavailableResponse defines model for ServiceUnavailableResponse.
type ServiceUnavailableResponse struct {
	Msg string `json:"msg"`
}

// GetEndpointsParams defines parameters for GetEndpoints.
type GetEndpointsParams struct {
	TenantName *string `form:"tenantName,omitempty" json:"tenantName,omitempty"`
	TenantId   *uint64 `form:"tenantId,omitempty" json:"tenantId,omitempty"`
}

// QueryErrLogParams defines parameters for QueryErrLog.
type QueryErrLogParams struct {
	TenantId  uint64                      `form:"tenantId" json:"tenantId"`
	Target    QueryErrLogParamsTarget     `form:"target" json:"target"`
	TargetId  string                      `form:"targetId" json:"targetId"`
	Start     *time.Time                  `form:"start,omitempty" json:"start,omitempty"`
	End       *time.Time                  `form:"end,omitempty" json:"end,omitempty"`
	Direction *QueryErrLogParamsDirection `form:"direction,omitempty" json:"direction,omitempty"`
	Limit     *uint64                     `form:"limit,omitempty" json:"limit,omitempty"`
}

// QueryErrLogParamsTarget defines parameters for QueryErrLog.
type QueryErrLogParamsTarget string

// QueryErrLogParamsDirection defines parameters for QueryErrLog.
type QueryErrLogParamsDirection string

// DeleteTenantParams defines parameters for DeleteTenant.
type DeleteTenantParams struct {
	TenantId   *uint64 `form:"tenantId,omitempty" json:"tenantId,omitempty"`
	TenantName *string `form:"tenantName,omitempty" json:"tenantName,omitempty"`
}

// GetTenantParams defines parameters for GetTenant.
type GetTenantParams struct {
	TenantId   *uint64 `form:"tenantId,omitempty" json:"tenantId,omitempty"`
	TenantName *string `form:"tenantName,omitempty" json:"tenantName,omitempty"`
}

// DeleteTenantDbusersParams defines parameters for DeleteTenantDbusers.
type DeleteTenantDbusersParams struct {
	TenantId uint64 `form:"tenantId" json:"tenantId"`
	Username string `form:"username" json:"username"`
}

// GetTenantDbusersParams defines parameters for GetTenantDbusers.
type GetTenantDbusersParams struct {
	TenantId uint64 `form:"tenantId" json:"tenantId"`
}

// PutTenantTenantIdConfigEtcdTextBody defines parameters for PutTenantTenantIdConfigEtcd.
type PutTenantTenantIdConfigEtcdTextBody = string

// PutTenantTenantIdConfigRisingwaveTextBody defines parameters for PutTenantTenantIdConfigRisingwave.
type PutTenantTenantIdConfigRisingwaveTextBody = string

// PostTenantTenantIdUpdateVersionJSONBody defines parameters for PostTenantTenantIdUpdateVersion.
type PostTenantTenantIdUpdateVersionJSONBody struct {
	Version *string `json:"version,omitempty"`
}

// GetTenantsParams defines parameters for GetTenants.
type GetTenantsParams struct {
	Offset *uint64 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostTenantDbusersJSONRequestBody defines body for PostTenantDbusers for application/json ContentType.
type PostTenantDbusersJSONRequestBody = CreateDBUserRequestBody

// PutTenantDbusersJSONRequestBody defines body for PutTenantDbusers for application/json ContentType.
type PutTenantDbusersJSONRequestBody = UpdateDBUserRequestBody

// PutTenantTenantIdConfigEtcdTextRequestBody defines body for PutTenantTenantIdConfigEtcd for text/plain ContentType.
type PutTenantTenantIdConfigEtcdTextRequestBody = PutTenantTenantIdConfigEtcdTextBody

// PutTenantTenantIdConfigRisingwaveTextRequestBody defines body for PutTenantTenantIdConfigRisingwave for text/plain ContentType.
type PutTenantTenantIdConfigRisingwaveTextRequestBody = PutTenantTenantIdConfigRisingwaveTextBody

// PostTenantTenantIdPrivatelinksJSONRequestBody defines body for PostTenantTenantIdPrivatelinks for application/json ContentType.
type PostTenantTenantIdPrivatelinksJSONRequestBody = PostPrivateLinkRequestBody

// PostTenantTenantIdResourceJSONRequestBody defines body for PostTenantTenantIdResource for application/json ContentType.
type PostTenantTenantIdResourceJSONRequestBody = PostTenantResourcesRequestBody

// PostTenantTenantIdUpdateVersionJSONRequestBody defines body for PostTenantTenantIdUpdateVersion for application/json ContentType.
type PostTenantTenantIdUpdateVersionJSONRequestBody PostTenantTenantIdUpdateVersionJSONBody

// PostTenantsJSONRequestBody defines body for PostTenants for application/json ContentType.
type PostTenantsJSONRequestBody = TenantRequestRequestBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetEndpoints request
	GetEndpoints(ctx context.Context, params *GetEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryErrLog request
	QueryErrLog(ctx context.Context, params *QueryErrLogParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRootca request
	GetRootca(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTenant request
	DeleteTenant(ctx context.Context, params *DeleteTenantParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenant request
	GetTenant(ctx context.Context, params *GetTenantParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTenantDbusers request
	DeleteTenantDbusers(ctx context.Context, params *DeleteTenantDbusersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantDbusers request
	GetTenantDbusers(ctx context.Context, params *GetTenantDbusersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantDbusersWithBody request with any body
	PostTenantDbusersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenantDbusers(ctx context.Context, body PostTenantDbusersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTenantDbusersWithBody request with any body
	PutTenantDbusersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTenantDbusers(ctx context.Context, body PutTenantDbusersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantTags request
	GetTenantTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTenantTenantIdConfigEtcdWithBody request with any body
	PutTenantTenantIdConfigEtcdWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTenantTenantIdConfigEtcdWithTextBody(ctx context.Context, tenantId uint64, body PutTenantTenantIdConfigEtcdTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTenantTenantIdConfigRisingwaveWithBody request with any body
	PutTenantTenantIdConfigRisingwaveWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTenantTenantIdConfigRisingwaveWithTextBody(ctx context.Context, tenantId uint64, body PutTenantTenantIdConfigRisingwaveTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTenantTenantIdPrivatelinkPrivateLinkId request
	DeleteTenantTenantIdPrivatelinkPrivateLinkId(ctx context.Context, tenantId uint64, privateLinkId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenantTenantIdPrivatelinkPrivateLinkId request
	GetTenantTenantIdPrivatelinkPrivateLinkId(ctx context.Context, tenantId uint64, privateLinkId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantTenantIdPrivatelinksWithBody request with any body
	PostTenantTenantIdPrivatelinksWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenantTenantIdPrivatelinks(ctx context.Context, tenantId uint64, body PostTenantTenantIdPrivatelinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantTenantIdResourceWithBody request with any body
	PostTenantTenantIdResourceWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenantTenantIdResource(ctx context.Context, tenantId uint64, body PostTenantTenantIdResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantTenantIdUpdateVersionWithBody request with any body
	PostTenantTenantIdUpdateVersionWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenantTenantIdUpdateVersion(ctx context.Context, tenantId uint64, body PostTenantTenantIdUpdateVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenants request
	GetTenants(ctx context.Context, params *GetTenantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTenantsWithBody request with any body
	PostTenantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTenants(ctx context.Context, body PostTenantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTiers request
	GetTiers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetEndpoints(ctx context.Context, params *GetEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryErrLog(ctx context.Context, params *QueryErrLogParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryErrLogRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRootca(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRootcaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTenant(ctx context.Context, params *DeleteTenantParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTenantRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenant(ctx context.Context, params *GetTenantParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTenantDbusers(ctx context.Context, params *DeleteTenantDbusersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTenantDbusersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantDbusers(ctx context.Context, params *GetTenantDbusersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantDbusersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantDbusersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantDbusersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantDbusers(ctx context.Context, body PostTenantDbusersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantDbusersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTenantDbusersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTenantDbusersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTenantDbusers(ctx context.Context, body PutTenantDbusersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTenantDbusersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTenantTenantIdConfigEtcdWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTenantTenantIdConfigEtcdRequestWithBody(c.Server, tenantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTenantTenantIdConfigEtcdWithTextBody(ctx context.Context, tenantId uint64, body PutTenantTenantIdConfigEtcdTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTenantTenantIdConfigEtcdRequestWithTextBody(c.Server, tenantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTenantTenantIdConfigRisingwaveWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTenantTenantIdConfigRisingwaveRequestWithBody(c.Server, tenantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTenantTenantIdConfigRisingwaveWithTextBody(ctx context.Context, tenantId uint64, body PutTenantTenantIdConfigRisingwaveTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTenantTenantIdConfigRisingwaveRequestWithTextBody(c.Server, tenantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTenantTenantIdPrivatelinkPrivateLinkId(ctx context.Context, tenantId uint64, privateLinkId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTenantTenantIdPrivatelinkPrivateLinkIdRequest(c.Server, tenantId, privateLinkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenantTenantIdPrivatelinkPrivateLinkId(ctx context.Context, tenantId uint64, privateLinkId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantTenantIdPrivatelinkPrivateLinkIdRequest(c.Server, tenantId, privateLinkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantTenantIdPrivatelinksWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantTenantIdPrivatelinksRequestWithBody(c.Server, tenantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantTenantIdPrivatelinks(ctx context.Context, tenantId uint64, body PostTenantTenantIdPrivatelinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantTenantIdPrivatelinksRequest(c.Server, tenantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantTenantIdResourceWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantTenantIdResourceRequestWithBody(c.Server, tenantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantTenantIdResource(ctx context.Context, tenantId uint64, body PostTenantTenantIdResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantTenantIdResourceRequest(c.Server, tenantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantTenantIdUpdateVersionWithBody(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantTenantIdUpdateVersionRequestWithBody(c.Server, tenantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantTenantIdUpdateVersion(ctx context.Context, tenantId uint64, body PostTenantTenantIdUpdateVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantTenantIdUpdateVersionRequest(c.Server, tenantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenants(ctx context.Context, params *GetTenantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenantsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTenants(ctx context.Context, body PostTenantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTenantsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTiers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTiersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetEndpointsRequest generates requests for GetEndpoints
func NewGetEndpointsRequest(server string, params *GetEndpointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TenantName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantName", runtime.ParamLocationQuery, *params.TenantName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryErrLogRequest generates requests for QueryErrLog
func NewQueryErrLogRequest(server string, params *QueryErrLogParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/log/queryError")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, params.TenantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target", runtime.ParamLocationQuery, params.Target); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetId", runtime.ParamLocationQuery, params.TargetId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Direction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, *params.Direction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRootcaRequest generates requests for GetRootca
func NewGetRootcaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rootca")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTenantRequest generates requests for DeleteTenant
func NewDeleteTenantRequest(server string, params *DeleteTenantParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantName", runtime.ParamLocationQuery, *params.TenantName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantRequest generates requests for GetTenant
func NewGetTenantRequest(server string, params *GetTenantParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantName", runtime.ParamLocationQuery, *params.TenantName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTenantDbusersRequest generates requests for DeleteTenantDbusers
func NewDeleteTenantDbusersRequest(server string, params *DeleteTenantDbusersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/dbusers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, params.TenantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantDbusersRequest generates requests for GetTenantDbusers
func NewGetTenantDbusersRequest(server string, params *GetTenantDbusersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/dbusers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantId", runtime.ParamLocationQuery, params.TenantId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTenantDbusersRequest calls the generic PostTenantDbusers builder with application/json body
func NewPostTenantDbusersRequest(server string, body PostTenantDbusersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantDbusersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTenantDbusersRequestWithBody generates requests for PostTenantDbusers with any type of body
func NewPostTenantDbusersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/dbusers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTenantDbusersRequest calls the generic PutTenantDbusers builder with application/json body
func NewPutTenantDbusersRequest(server string, body PutTenantDbusersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTenantDbusersRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTenantDbusersRequestWithBody generates requests for PutTenantDbusers with any type of body
func NewPutTenantDbusersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/dbusers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTenantTagsRequest generates requests for GetTenantTags
func NewGetTenantTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTenantTenantIdConfigEtcdRequestWithTextBody calls the generic PutTenantTenantIdConfigEtcd builder with text/plain body
func NewPutTenantTenantIdConfigEtcdRequestWithTextBody(server string, tenantId uint64, body PutTenantTenantIdConfigEtcdTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPutTenantTenantIdConfigEtcdRequestWithBody(server, tenantId, "text/plain", bodyReader)
}

// NewPutTenantTenantIdConfigEtcdRequestWithBody generates requests for PutTenantTenantIdConfigEtcd with any type of body
func NewPutTenantTenantIdConfigEtcdRequestWithBody(server string, tenantId uint64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/%s/config/etcd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTenantTenantIdConfigRisingwaveRequestWithTextBody calls the generic PutTenantTenantIdConfigRisingwave builder with text/plain body
func NewPutTenantTenantIdConfigRisingwaveRequestWithTextBody(server string, tenantId uint64, body PutTenantTenantIdConfigRisingwaveTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPutTenantTenantIdConfigRisingwaveRequestWithBody(server, tenantId, "text/plain", bodyReader)
}

// NewPutTenantTenantIdConfigRisingwaveRequestWithBody generates requests for PutTenantTenantIdConfigRisingwave with any type of body
func NewPutTenantTenantIdConfigRisingwaveRequestWithBody(server string, tenantId uint64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/%s/config/risingwave", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTenantTenantIdPrivatelinkPrivateLinkIdRequest generates requests for DeleteTenantTenantIdPrivatelinkPrivateLinkId
func NewDeleteTenantTenantIdPrivatelinkPrivateLinkIdRequest(server string, tenantId uint64, privateLinkId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "privateLinkId", runtime.ParamLocationPath, privateLinkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/%s/privatelink/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenantTenantIdPrivatelinkPrivateLinkIdRequest generates requests for GetTenantTenantIdPrivatelinkPrivateLinkId
func NewGetTenantTenantIdPrivatelinkPrivateLinkIdRequest(server string, tenantId uint64, privateLinkId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "privateLinkId", runtime.ParamLocationPath, privateLinkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/%s/privatelink/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTenantTenantIdPrivatelinksRequest calls the generic PostTenantTenantIdPrivatelinks builder with application/json body
func NewPostTenantTenantIdPrivatelinksRequest(server string, tenantId uint64, body PostTenantTenantIdPrivatelinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantTenantIdPrivatelinksRequestWithBody(server, tenantId, "application/json", bodyReader)
}

// NewPostTenantTenantIdPrivatelinksRequestWithBody generates requests for PostTenantTenantIdPrivatelinks with any type of body
func NewPostTenantTenantIdPrivatelinksRequestWithBody(server string, tenantId uint64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/%s/privatelinks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTenantTenantIdResourceRequest calls the generic PostTenantTenantIdResource builder with application/json body
func NewPostTenantTenantIdResourceRequest(server string, tenantId uint64, body PostTenantTenantIdResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantTenantIdResourceRequestWithBody(server, tenantId, "application/json", bodyReader)
}

// NewPostTenantTenantIdResourceRequestWithBody generates requests for PostTenantTenantIdResource with any type of body
func NewPostTenantTenantIdResourceRequestWithBody(server string, tenantId uint64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/%s/resource", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTenantTenantIdUpdateVersionRequest calls the generic PostTenantTenantIdUpdateVersion builder with application/json body
func NewPostTenantTenantIdUpdateVersionRequest(server string, tenantId uint64, body PostTenantTenantIdUpdateVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantTenantIdUpdateVersionRequestWithBody(server, tenantId, "application/json", bodyReader)
}

// NewPostTenantTenantIdUpdateVersionRequestWithBody generates requests for PostTenantTenantIdUpdateVersion with any type of body
func NewPostTenantTenantIdUpdateVersionRequestWithBody(server string, tenantId uint64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenant/%s/updateVersion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTenantsRequest generates requests for GetTenants
func NewGetTenantsRequest(server string, params *GetTenantsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTenantsRequest calls the generic PostTenants builder with application/json body
func NewPostTenantsRequest(server string, body PostTenantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTenantsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTenantsRequestWithBody generates requests for PostTenants with any type of body
func NewPostTenantsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTiersRequest generates requests for GetTiers
func NewGetTiersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetEndpointsWithResponse request
	GetEndpointsWithResponse(ctx context.Context, params *GetEndpointsParams, reqEditors ...RequestEditorFn) (*GetEndpointsResponse, error)

	// QueryErrLogWithResponse request
	QueryErrLogWithResponse(ctx context.Context, params *QueryErrLogParams, reqEditors ...RequestEditorFn) (*QueryErrLogResponse, error)

	// GetRootcaWithResponse request
	GetRootcaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRootcaResponse, error)

	// DeleteTenantWithResponse request
	DeleteTenantWithResponse(ctx context.Context, params *DeleteTenantParams, reqEditors ...RequestEditorFn) (*DeleteTenantResponse, error)

	// GetTenantWithResponse request
	GetTenantWithResponse(ctx context.Context, params *GetTenantParams, reqEditors ...RequestEditorFn) (*GetTenantResponse, error)

	// DeleteTenantDbusersWithResponse request
	DeleteTenantDbusersWithResponse(ctx context.Context, params *DeleteTenantDbusersParams, reqEditors ...RequestEditorFn) (*DeleteTenantDbusersResponse, error)

	// GetTenantDbusersWithResponse request
	GetTenantDbusersWithResponse(ctx context.Context, params *GetTenantDbusersParams, reqEditors ...RequestEditorFn) (*GetTenantDbusersResponse, error)

	// PostTenantDbusersWithBodyWithResponse request with any body
	PostTenantDbusersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantDbusersResponse, error)

	PostTenantDbusersWithResponse(ctx context.Context, body PostTenantDbusersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantDbusersResponse, error)

	// PutTenantDbusersWithBodyWithResponse request with any body
	PutTenantDbusersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTenantDbusersResponse, error)

	PutTenantDbusersWithResponse(ctx context.Context, body PutTenantDbusersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTenantDbusersResponse, error)

	// GetTenantTagsWithResponse request
	GetTenantTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTenantTagsResponse, error)

	// PutTenantTenantIdConfigEtcdWithBodyWithResponse request with any body
	PutTenantTenantIdConfigEtcdWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTenantTenantIdConfigEtcdResponse, error)

	PutTenantTenantIdConfigEtcdWithTextBodyWithResponse(ctx context.Context, tenantId uint64, body PutTenantTenantIdConfigEtcdTextRequestBody, reqEditors ...RequestEditorFn) (*PutTenantTenantIdConfigEtcdResponse, error)

	// PutTenantTenantIdConfigRisingwaveWithBodyWithResponse request with any body
	PutTenantTenantIdConfigRisingwaveWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTenantTenantIdConfigRisingwaveResponse, error)

	PutTenantTenantIdConfigRisingwaveWithTextBodyWithResponse(ctx context.Context, tenantId uint64, body PutTenantTenantIdConfigRisingwaveTextRequestBody, reqEditors ...RequestEditorFn) (*PutTenantTenantIdConfigRisingwaveResponse, error)

	// DeleteTenantTenantIdPrivatelinkPrivateLinkIdWithResponse request
	DeleteTenantTenantIdPrivatelinkPrivateLinkIdWithResponse(ctx context.Context, tenantId uint64, privateLinkId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse, error)

	// GetTenantTenantIdPrivatelinkPrivateLinkIdWithResponse request
	GetTenantTenantIdPrivatelinkPrivateLinkIdWithResponse(ctx context.Context, tenantId uint64, privateLinkId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTenantTenantIdPrivatelinkPrivateLinkIdResponse, error)

	// PostTenantTenantIdPrivatelinksWithBodyWithResponse request with any body
	PostTenantTenantIdPrivatelinksWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantTenantIdPrivatelinksResponse, error)

	PostTenantTenantIdPrivatelinksWithResponse(ctx context.Context, tenantId uint64, body PostTenantTenantIdPrivatelinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantTenantIdPrivatelinksResponse, error)

	// PostTenantTenantIdResourceWithBodyWithResponse request with any body
	PostTenantTenantIdResourceWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantTenantIdResourceResponse, error)

	PostTenantTenantIdResourceWithResponse(ctx context.Context, tenantId uint64, body PostTenantTenantIdResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantTenantIdResourceResponse, error)

	// PostTenantTenantIdUpdateVersionWithBodyWithResponse request with any body
	PostTenantTenantIdUpdateVersionWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantTenantIdUpdateVersionResponse, error)

	PostTenantTenantIdUpdateVersionWithResponse(ctx context.Context, tenantId uint64, body PostTenantTenantIdUpdateVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantTenantIdUpdateVersionResponse, error)

	// GetTenantsWithResponse request
	GetTenantsWithResponse(ctx context.Context, params *GetTenantsParams, reqEditors ...RequestEditorFn) (*GetTenantsResponse, error)

	// PostTenantsWithBodyWithResponse request with any body
	PostTenantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantsResponse, error)

	PostTenantsWithResponse(ctx context.Context, body PostTenantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantsResponse, error)

	// GetTiersWithResponse request
	GetTiersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTiersResponse, error)
}

type GetEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
	JSON404      *NotFoundResponse
}

// Status returns HTTPResponse.Status
func (r GetEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryErrLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ErrLogQueryResult
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r QueryErrLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryErrLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRootcaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRootcaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRootcaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *DefaultResponse
	JSON403      *DefaultResponse
	JSON404      *DefaultResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tenant
	JSON404      *NotFoundResponse
}

// Status returns HTTPResponse.Status
func (r GetTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTenantDbusersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultResponse
	JSON404      *DefaultResponse
	JSON503      *ServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTenantDbusersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTenantDbusersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantDbusersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBUsers
	JSON404      *DefaultResponse
	JSON503      *ServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r GetTenantDbusersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantDbusersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantDbusersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBUser
	JSON404      *DefaultResponse
	JSON503      *ServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r PostTenantDbusersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantDbusersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTenantDbusersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultResponse
	JSON404      *DefaultResponse
	JSON503      *ServiceUnavailableResponse
}

// Status returns HTTPResponse.Status
func (r PutTenantDbusersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTenantDbusersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetImageTagResponse
}

// Status returns HTTPResponse.Status
func (r GetTenantTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTenantTenantIdConfigEtcdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundResponse
	JSON409      *DefaultResponse
}

// Status returns HTTPResponse.Status
func (r PutTenantTenantIdConfigEtcdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTenantTenantIdConfigEtcdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTenantTenantIdConfigRisingwaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundResponse
	JSON409      *DefaultResponse
}

// Status returns HTTPResponse.Status
func (r PutTenantTenantIdConfigRisingwaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTenantTenantIdConfigRisingwaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *DefaultResponse
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantTenantIdPrivatelinkPrivateLinkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateLink
	JSON404      *NotFoundResponse
}

// Status returns HTTPResponse.Status
func (r GetTenantTenantIdPrivatelinkPrivateLinkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantTenantIdPrivatelinkPrivateLinkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantTenantIdPrivatelinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostPrivateLinkResponseBody
	JSON400      *BadRequestResponse
}

// Status returns HTTPResponse.Status
func (r PostTenantTenantIdPrivatelinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantTenantIdPrivatelinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantTenantIdResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *DefaultResponse
	JSON400      *BadRequestResponse
	JSON422      *DefaultResponse
}

// Status returns HTTPResponse.Status
func (r PostTenantTenantIdResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantTenantIdResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantTenantIdUpdateVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *DefaultResponse
	JSON404      *DefaultResponse
	JSON409      *DefaultResponse
}

// Status returns HTTPResponse.Status
func (r PostTenantTenantIdUpdateVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantTenantIdUpdateVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenantSizePage
}

// Status returns HTTPResponse.Status
func (r GetTenantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTenantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CreateTenantResponseBody
	JSON400      *BadRequestResponse
	JSON422      *DefaultResponse
}

// Status returns HTTPResponse.Status
func (r PostTenantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTenantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tiers
}

// Status returns HTTPResponse.Status
func (r GetTiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetEndpointsWithResponse request returning *GetEndpointsResponse
func (c *ClientWithResponses) GetEndpointsWithResponse(ctx context.Context, params *GetEndpointsParams, reqEditors ...RequestEditorFn) (*GetEndpointsResponse, error) {
	rsp, err := c.GetEndpoints(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEndpointsResponse(rsp)
}

// QueryErrLogWithResponse request returning *QueryErrLogResponse
func (c *ClientWithResponses) QueryErrLogWithResponse(ctx context.Context, params *QueryErrLogParams, reqEditors ...RequestEditorFn) (*QueryErrLogResponse, error) {
	rsp, err := c.QueryErrLog(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryErrLogResponse(rsp)
}

// GetRootcaWithResponse request returning *GetRootcaResponse
func (c *ClientWithResponses) GetRootcaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRootcaResponse, error) {
	rsp, err := c.GetRootca(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRootcaResponse(rsp)
}

// DeleteTenantWithResponse request returning *DeleteTenantResponse
func (c *ClientWithResponses) DeleteTenantWithResponse(ctx context.Context, params *DeleteTenantParams, reqEditors ...RequestEditorFn) (*DeleteTenantResponse, error) {
	rsp, err := c.DeleteTenant(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTenantResponse(rsp)
}

// GetTenantWithResponse request returning *GetTenantResponse
func (c *ClientWithResponses) GetTenantWithResponse(ctx context.Context, params *GetTenantParams, reqEditors ...RequestEditorFn) (*GetTenantResponse, error) {
	rsp, err := c.GetTenant(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantResponse(rsp)
}

// DeleteTenantDbusersWithResponse request returning *DeleteTenantDbusersResponse
func (c *ClientWithResponses) DeleteTenantDbusersWithResponse(ctx context.Context, params *DeleteTenantDbusersParams, reqEditors ...RequestEditorFn) (*DeleteTenantDbusersResponse, error) {
	rsp, err := c.DeleteTenantDbusers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTenantDbusersResponse(rsp)
}

// GetTenantDbusersWithResponse request returning *GetTenantDbusersResponse
func (c *ClientWithResponses) GetTenantDbusersWithResponse(ctx context.Context, params *GetTenantDbusersParams, reqEditors ...RequestEditorFn) (*GetTenantDbusersResponse, error) {
	rsp, err := c.GetTenantDbusers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantDbusersResponse(rsp)
}

// PostTenantDbusersWithBodyWithResponse request with arbitrary body returning *PostTenantDbusersResponse
func (c *ClientWithResponses) PostTenantDbusersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantDbusersResponse, error) {
	rsp, err := c.PostTenantDbusersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantDbusersResponse(rsp)
}

func (c *ClientWithResponses) PostTenantDbusersWithResponse(ctx context.Context, body PostTenantDbusersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantDbusersResponse, error) {
	rsp, err := c.PostTenantDbusers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantDbusersResponse(rsp)
}

// PutTenantDbusersWithBodyWithResponse request with arbitrary body returning *PutTenantDbusersResponse
func (c *ClientWithResponses) PutTenantDbusersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTenantDbusersResponse, error) {
	rsp, err := c.PutTenantDbusersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTenantDbusersResponse(rsp)
}

func (c *ClientWithResponses) PutTenantDbusersWithResponse(ctx context.Context, body PutTenantDbusersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTenantDbusersResponse, error) {
	rsp, err := c.PutTenantDbusers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTenantDbusersResponse(rsp)
}

// GetTenantTagsWithResponse request returning *GetTenantTagsResponse
func (c *ClientWithResponses) GetTenantTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTenantTagsResponse, error) {
	rsp, err := c.GetTenantTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantTagsResponse(rsp)
}

// PutTenantTenantIdConfigEtcdWithBodyWithResponse request with arbitrary body returning *PutTenantTenantIdConfigEtcdResponse
func (c *ClientWithResponses) PutTenantTenantIdConfigEtcdWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTenantTenantIdConfigEtcdResponse, error) {
	rsp, err := c.PutTenantTenantIdConfigEtcdWithBody(ctx, tenantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTenantTenantIdConfigEtcdResponse(rsp)
}

func (c *ClientWithResponses) PutTenantTenantIdConfigEtcdWithTextBodyWithResponse(ctx context.Context, tenantId uint64, body PutTenantTenantIdConfigEtcdTextRequestBody, reqEditors ...RequestEditorFn) (*PutTenantTenantIdConfigEtcdResponse, error) {
	rsp, err := c.PutTenantTenantIdConfigEtcdWithTextBody(ctx, tenantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTenantTenantIdConfigEtcdResponse(rsp)
}

// PutTenantTenantIdConfigRisingwaveWithBodyWithResponse request with arbitrary body returning *PutTenantTenantIdConfigRisingwaveResponse
func (c *ClientWithResponses) PutTenantTenantIdConfigRisingwaveWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTenantTenantIdConfigRisingwaveResponse, error) {
	rsp, err := c.PutTenantTenantIdConfigRisingwaveWithBody(ctx, tenantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTenantTenantIdConfigRisingwaveResponse(rsp)
}

func (c *ClientWithResponses) PutTenantTenantIdConfigRisingwaveWithTextBodyWithResponse(ctx context.Context, tenantId uint64, body PutTenantTenantIdConfigRisingwaveTextRequestBody, reqEditors ...RequestEditorFn) (*PutTenantTenantIdConfigRisingwaveResponse, error) {
	rsp, err := c.PutTenantTenantIdConfigRisingwaveWithTextBody(ctx, tenantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTenantTenantIdConfigRisingwaveResponse(rsp)
}

// DeleteTenantTenantIdPrivatelinkPrivateLinkIdWithResponse request returning *DeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse
func (c *ClientWithResponses) DeleteTenantTenantIdPrivatelinkPrivateLinkIdWithResponse(ctx context.Context, tenantId uint64, privateLinkId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse, error) {
	rsp, err := c.DeleteTenantTenantIdPrivatelinkPrivateLinkId(ctx, tenantId, privateLinkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse(rsp)
}

// GetTenantTenantIdPrivatelinkPrivateLinkIdWithResponse request returning *GetTenantTenantIdPrivatelinkPrivateLinkIdResponse
func (c *ClientWithResponses) GetTenantTenantIdPrivatelinkPrivateLinkIdWithResponse(ctx context.Context, tenantId uint64, privateLinkId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTenantTenantIdPrivatelinkPrivateLinkIdResponse, error) {
	rsp, err := c.GetTenantTenantIdPrivatelinkPrivateLinkId(ctx, tenantId, privateLinkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantTenantIdPrivatelinkPrivateLinkIdResponse(rsp)
}

// PostTenantTenantIdPrivatelinksWithBodyWithResponse request with arbitrary body returning *PostTenantTenantIdPrivatelinksResponse
func (c *ClientWithResponses) PostTenantTenantIdPrivatelinksWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantTenantIdPrivatelinksResponse, error) {
	rsp, err := c.PostTenantTenantIdPrivatelinksWithBody(ctx, tenantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantTenantIdPrivatelinksResponse(rsp)
}

func (c *ClientWithResponses) PostTenantTenantIdPrivatelinksWithResponse(ctx context.Context, tenantId uint64, body PostTenantTenantIdPrivatelinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantTenantIdPrivatelinksResponse, error) {
	rsp, err := c.PostTenantTenantIdPrivatelinks(ctx, tenantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantTenantIdPrivatelinksResponse(rsp)
}

// PostTenantTenantIdResourceWithBodyWithResponse request with arbitrary body returning *PostTenantTenantIdResourceResponse
func (c *ClientWithResponses) PostTenantTenantIdResourceWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantTenantIdResourceResponse, error) {
	rsp, err := c.PostTenantTenantIdResourceWithBody(ctx, tenantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantTenantIdResourceResponse(rsp)
}

func (c *ClientWithResponses) PostTenantTenantIdResourceWithResponse(ctx context.Context, tenantId uint64, body PostTenantTenantIdResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantTenantIdResourceResponse, error) {
	rsp, err := c.PostTenantTenantIdResource(ctx, tenantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantTenantIdResourceResponse(rsp)
}

// PostTenantTenantIdUpdateVersionWithBodyWithResponse request with arbitrary body returning *PostTenantTenantIdUpdateVersionResponse
func (c *ClientWithResponses) PostTenantTenantIdUpdateVersionWithBodyWithResponse(ctx context.Context, tenantId uint64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantTenantIdUpdateVersionResponse, error) {
	rsp, err := c.PostTenantTenantIdUpdateVersionWithBody(ctx, tenantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantTenantIdUpdateVersionResponse(rsp)
}

func (c *ClientWithResponses) PostTenantTenantIdUpdateVersionWithResponse(ctx context.Context, tenantId uint64, body PostTenantTenantIdUpdateVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantTenantIdUpdateVersionResponse, error) {
	rsp, err := c.PostTenantTenantIdUpdateVersion(ctx, tenantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantTenantIdUpdateVersionResponse(rsp)
}

// GetTenantsWithResponse request returning *GetTenantsResponse
func (c *ClientWithResponses) GetTenantsWithResponse(ctx context.Context, params *GetTenantsParams, reqEditors ...RequestEditorFn) (*GetTenantsResponse, error) {
	rsp, err := c.GetTenants(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenantsResponse(rsp)
}

// PostTenantsWithBodyWithResponse request with arbitrary body returning *PostTenantsResponse
func (c *ClientWithResponses) PostTenantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTenantsResponse, error) {
	rsp, err := c.PostTenantsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantsResponse(rsp)
}

func (c *ClientWithResponses) PostTenantsWithResponse(ctx context.Context, body PostTenantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTenantsResponse, error) {
	rsp, err := c.PostTenants(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTenantsResponse(rsp)
}

// GetTiersWithResponse request returning *GetTiersResponse
func (c *ClientWithResponses) GetTiersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTiersResponse, error) {
	rsp, err := c.GetTiers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTiersResponse(rsp)
}

// ParseGetEndpointsResponse parses an HTTP response from a GetEndpointsWithResponse call
func ParseGetEndpointsResponse(rsp *http.Response) (*GetEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseQueryErrLogResponse parses an HTTP response from a QueryErrLogWithResponse call
func ParseQueryErrLogResponse(rsp *http.Response) (*QueryErrLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryErrLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ErrLogQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRootcaResponse parses an HTTP response from a GetRootcaWithResponse call
func ParseGetRootcaResponse(rsp *http.Response) (*GetRootcaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRootcaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTenantResponse parses an HTTP response from a DeleteTenantWithResponse call
func ParseDeleteTenantResponse(rsp *http.Response) (*DeleteTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTenantResponse parses an HTTP response from a GetTenantWithResponse call
func ParseGetTenantResponse(rsp *http.Response) (*GetTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tenant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteTenantDbusersResponse parses an HTTP response from a DeleteTenantDbusersWithResponse call
func ParseDeleteTenantDbusersResponse(rsp *http.Response) (*DeleteTenantDbusersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTenantDbusersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTenantDbusersResponse parses an HTTP response from a GetTenantDbusersWithResponse call
func ParseGetTenantDbusersResponse(rsp *http.Response) (*GetTenantDbusersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantDbusersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostTenantDbusersResponse parses an HTTP response from a PostTenantDbusersWithResponse call
func ParsePostTenantDbusersResponse(rsp *http.Response) (*PostTenantDbusersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantDbusersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutTenantDbusersResponse parses an HTTP response from a PutTenantDbusersWithResponse call
func ParsePutTenantDbusersResponse(rsp *http.Response) (*PutTenantDbusersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTenantDbusersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTenantTagsResponse parses an HTTP response from a GetTenantTagsWithResponse call
func ParseGetTenantTagsResponse(rsp *http.Response) (*GetTenantTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetImageTagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTenantTenantIdConfigEtcdResponse parses an HTTP response from a PutTenantTenantIdConfigEtcdWithResponse call
func ParsePutTenantTenantIdConfigEtcdResponse(rsp *http.Response) (*PutTenantTenantIdConfigEtcdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTenantTenantIdConfigEtcdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutTenantTenantIdConfigRisingwaveResponse parses an HTTP response from a PutTenantTenantIdConfigRisingwaveWithResponse call
func ParsePutTenantTenantIdConfigRisingwaveResponse(rsp *http.Response) (*PutTenantTenantIdConfigRisingwaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTenantTenantIdConfigRisingwaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse parses an HTTP response from a DeleteTenantTenantIdPrivatelinkPrivateLinkIdWithResponse call
func ParseDeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse(rsp *http.Response) (*DeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTenantTenantIdPrivatelinkPrivateLinkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTenantTenantIdPrivatelinkPrivateLinkIdResponse parses an HTTP response from a GetTenantTenantIdPrivatelinkPrivateLinkIdWithResponse call
func ParseGetTenantTenantIdPrivatelinkPrivateLinkIdResponse(rsp *http.Response) (*GetTenantTenantIdPrivatelinkPrivateLinkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantTenantIdPrivatelinkPrivateLinkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostTenantTenantIdPrivatelinksResponse parses an HTTP response from a PostTenantTenantIdPrivatelinksWithResponse call
func ParsePostTenantTenantIdPrivatelinksResponse(rsp *http.Response) (*PostTenantTenantIdPrivatelinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantTenantIdPrivatelinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostPrivateLinkResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostTenantTenantIdResourceResponse parses an HTTP response from a PostTenantTenantIdResourceWithResponse call
func ParsePostTenantTenantIdResourceResponse(rsp *http.Response) (*PostTenantTenantIdResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantTenantIdResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostTenantTenantIdUpdateVersionResponse parses an HTTP response from a PostTenantTenantIdUpdateVersionWithResponse call
func ParsePostTenantTenantIdUpdateVersionResponse(rsp *http.Response) (*PostTenantTenantIdUpdateVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantTenantIdUpdateVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetTenantsResponse parses an HTTP response from a GetTenantsWithResponse call
func ParseGetTenantsResponse(rsp *http.Response) (*GetTenantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantSizePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTenantsResponse parses an HTTP response from a PostTenantsWithResponse call
func ParsePostTenantsResponse(rsp *http.Response) (*PostTenantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTenantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CreateTenantResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest DefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTiersResponse parses an HTTP response from a GetTiersWithResponse call
func ParseGetTiersResponse(rsp *http.Response) (*GetTiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
